module.exports.ConfigManager = class ConfigManager{constructor(r){this.profiles=r}getConfig(r){return this.profiles[r]||{}}}
module.exports.Flags = class Flags{constructor(){const s=process.argv;let r,t,a,g;for(this.args={},r=0;r<s.length;r++)a=s[r].trim(),t=a.replace(/^\-+/,""),t===a?(g&&(this.args[g]=t),g=null):(g=t,this.args[g]=!0)}get(s){return this.args[s]}}
module.exports.Lib = function Lib(i){return function(n,b){n.hasOwnProperty("libs")||(n.libs=[]),n.libs.push({propertyLib:b,nameLib:i})}}
module.exports.LibraryManager = class LibraryManager{constructor(r,i){this.configManager=r,this.libraries=i,this.librariesInstances={}}async build(r){const i=Object.keys(this.libraries);for(const a of i){r&&r(`Iniciando librería ${a}...`);let i=(0,this.libraries[a])(this.configManager.getConfig(a));try{this.librariesInstances[a]=i instanceof Promise?await i:i}catch(r){throw new Error(`Error al cargar la librería ${a}`)}r&&r(`Librería ${a} lista!`)}this.isCompiled=!0}getLibrary(r){return this.librariesInstances[r]}}
module.exports.Model = function Model(o){return function(e,d){e.hasOwnProperty("models")||(e.models=[]),e.models.push({propertyMod:d,model:o})}}
module.exports.ModelsManager = class ModelsManager{constructor(t,e){this.instances={};for(const o in t){const s=t[o];let r=[];s.prototype.libs&&(r=s.prototype.libs.map((({propertyLib:t,nameLib:o})=>({propertyLib:t,lib:e.getLibrary(o)}))),delete s.prototype.libs);const i=new s;for(const{propertyLib:t,lib:e}of r)i[t]=e;this.instances[o]=i}}getModel(t){return this.instances[t]}}